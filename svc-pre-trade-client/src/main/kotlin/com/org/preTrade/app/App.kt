/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.org.preTrade.app

import cdm.event.common.ExecutionInstruction
import com.google.inject.Guice
import com.google.inject.Injector
import com.rosetta.model.lib.records.DateImpl
import org.hyperledger.fabric.gateway.Gateway
import org.hyperledger.fabric.gateway.Wallets
import org.isda.cdm.CdmRuntimeModule
import java.nio.file.Paths
import java.time.LocalDate


class App {
    val injector: Injector = Guice.createInjector(CdmRuntimeModule())

    init {
        System.setProperty("org.hyperledger.fabric.sdk.service_discovery.as_localhost", "true")
    }


    companion object {

        fun connect(): Gateway {
            // Load a file system based wallet for managing identities.
            val walletPath = Paths.get("wallet")
            val wallet = Wallets.newFileSystemWallet(walletPath)
            // load a CCP
            val networkConfigPath = Paths.get(
                "..",
                "..",
                "fabric-samples",
                "test-network",
                "organizations",
                "peerOrganizations",
                "org1.example.com",
                "connection-org1.yaml"
            )
            val builder = Gateway.createBuilder()
            builder.identity(wallet, "appUserX").networkConfig(networkConfigPath).discovery(true)
            return builder.connect()
        }

        @JvmStatic
        fun main(args: Array<String>) {

            val hyperledgerObjectFactory = HyperledgerObjectFactory()
            val wallet = hyperledgerObjectFactory.createFileWallet()
            val hfcaClient = hyperledgerObjectFactory.createCertificateAuthorityClient()
            val registerer = UserRegisterer(wallet, hfcaClient)
            val gateway = HyperledgerGateway(wallet, hfcaClient)

            gateway.executeTrade(registerer.anyAppUser, ExecutionInstruction.builder().setTradeDate(DateImpl(LocalDate.now())))
//
//            kotlin.runCatching {
//                val gateway = connect()
//
//                val network: Network = gateway.getNetwork("mychannel")
//                val contract = network.getContract("chaincode-trade-lifecycle", "com.org.trade.lifecycle.position")
//
//                println("Submit Transaction: InitLedger creates the initial set of assets on the ledger.")
//                val request = ExecutionInstruction.builder().setTradeDate(DateImpl(LocalDate.now())).toString()
//                val result = contract.submitTransaction("executeTrade", request)
//                print(String(result))
//            }


        }
    }
}

